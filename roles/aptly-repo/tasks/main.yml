-
    name: Create aptly user
    # TODO disable login shell for aptly user
    user: name={{ aptly_user }} shell=/bin/bash
    become: yes
-
    name: Install aptly debian repository
    apt_repository: repo='deb http://repo.aptly.info/ squeeze main' state=present update_cache=yes
    become: yes
-
    name: Import aptly key
    apt_key: id=9E3E53F19C7DE460 keyserver=keys.gnupg.net state=present
    become: yes
-
    name: Install GPG
    apt: name={{ item }} state=present update_cache=yes
    with_items:
        - aptly
        - gnupg
        - python-pexpect
    become: yes
-
    name: Upload repository key
    copy: src="{{ aptly_secret_key_path }}/{{ aptly_secret_key_file }}" dest=/tmp owner={{ aptly_user }} group="{{ aptly_user }}" mode=0400
    become: yes
    changed_when: False
-
    name: Import repository key to gnupg
    shell: >
        ( gpg --list-secret-keys | grep -q "{{ aptly_secret_key_id }}" )
        || gpg --allow-secret-key-import --import /tmp/{{ aptly_secret_key_file }}
    become: yes
    become_user: "{{ aptly_user }}"
    register: command_result
    changed_when: "command_result.stdout != ''"
-
    name: Remove secret key from remote host
    file:
        path: "/tmp/{{ aptly_secret_key_file }}"
        state: absent
    become: yes
    changed_when: False
-
    name: Create repositories
    shell: >
        (aptly repo list -raw | grep -q "^{{ item.name }}$" ) ||
        aptly repo create \
            --comment "{{ item.comment|default('\"\"') }}" \
            --distribution "{{ item.distribution|default('main') }}" \
            --component "{{ item.component|default('main') }}" \
            "{{ item.name }}"
    become: yes
    become_user: "{{ aptly_user }}"
    with_items: "{{ aptly_repositories }}"
    when: aptly_repositories is defined
    register: command_result
    changed_when: "command_result.stdout != ''"
-
    name: Publish repositories
    expect:
        command: >
          bash -c "(aptly publish list -raw | awk '{ print $1; }' | grep -q '^{{ item.name }}$') ||
            aptly publish repo \
              --gpg-key '{{ aptly_secret_key_id }}' \
              --architectures '{{ item.architectures|default('amd64,i386') }}' \
              '{{ item.name }}' \
              '{{ item.prefix|default(item.name) }}'"
        responses:
            (?i)passphrase: "{{ aptly_gpg_passphrase }}"
    become: yes
    become_user: "{{ aptly_user }}"
    with_items: "{{ aptly_repositories }}"
    when: aptly_repositories is defined
    register: command_result
    changed_when: "command_result.stdout != ''"
